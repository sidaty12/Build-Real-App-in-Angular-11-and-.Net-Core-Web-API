{"ast":null,"code":"import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function sample(notifier) {\n  return source => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator {\n  constructor(notifier) {\n    this.notifier = notifier;\n  }\n\n  call(subscriber, source) {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n\n}\n\nclass SampleSubscriber extends OuterSubscriber {\n  constructor() {\n    super(...arguments);\n    this.hasValue = false;\n  }\n\n  _next(value) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.emitValue();\n  }\n\n  notifyComplete() {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n\n}","map":{"version":3,"names":["OuterSubscriber","subscribeToResult","sample","notifier","source","lift","SampleOperator","constructor","call","subscriber","sampleSubscriber","SampleSubscriber","subscription","subscribe","add","arguments","hasValue","_next","value","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","emitValue","notifyComplete","destination","next"],"sources":["C:/DevSid/Projet/App-Angular/my-first-app/node_modules/rxjs/_esm2015/internal/operators/sample.js"],"sourcesContent":["import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function sample(notifier) {\n    return (source) => source.lift(new SampleOperator(notifier));\n}\nclass SampleOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        const sampleSubscriber = new SampleSubscriber(subscriber);\n        const subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    }\n}\nclass SampleSubscriber extends OuterSubscriber {\n    constructor() {\n        super(...arguments);\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.value = value;\n        this.hasValue = true;\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    }\n    notifyComplete() {\n        this.emitValue();\n    }\n    emitValue() {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,eAAT,QAAgC,oBAAhC;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,OAAO,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;EAC7B,OAAQC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,cAAJ,CAAmBH,QAAnB,CAAZ,CAAnB;AACH;;AACD,MAAMG,cAAN,CAAqB;EACjBC,WAAW,CAACJ,QAAD,EAAW;IAClB,KAAKA,QAAL,GAAgBA,QAAhB;EACH;;EACDK,IAAI,CAACC,UAAD,EAAaL,MAAb,EAAqB;IACrB,MAAMM,gBAAgB,GAAG,IAAIC,gBAAJ,CAAqBF,UAArB,CAAzB;IACA,MAAMG,YAAY,GAAGR,MAAM,CAACS,SAAP,CAAiBH,gBAAjB,CAArB;IACAE,YAAY,CAACE,GAAb,CAAiBb,iBAAiB,CAACS,gBAAD,EAAmB,KAAKP,QAAxB,CAAlC;IACA,OAAOS,YAAP;EACH;;AATgB;;AAWrB,MAAMD,gBAAN,SAA+BX,eAA/B,CAA+C;EAC3CO,WAAW,GAAG;IACV,MAAM,GAAGQ,SAAT;IACA,KAAKC,QAAL,GAAgB,KAAhB;EACH;;EACDC,KAAK,CAACC,KAAD,EAAQ;IACT,KAAKA,KAAL,GAAaA,KAAb;IACA,KAAKF,QAAL,GAAgB,IAAhB;EACH;;EACDG,UAAU,CAACC,UAAD,EAAaC,UAAb,EAAyBC,UAAzB,EAAqCC,UAArC,EAAiDC,QAAjD,EAA2D;IACjE,KAAKC,SAAL;EACH;;EACDC,cAAc,GAAG;IACb,KAAKD,SAAL;EACH;;EACDA,SAAS,GAAG;IACR,IAAI,KAAKT,QAAT,EAAmB;MACf,KAAKA,QAAL,GAAgB,KAAhB;MACA,KAAKW,WAAL,CAAiBC,IAAjB,CAAsB,KAAKV,KAA3B;IACH;EACJ;;AApB0C"},"metadata":{},"sourceType":"module"}