{"ast":null,"code":"import { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function repeatWhen(notifier) {\n  return source => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator {\n  constructor(notifier) {\n    this.notifier = notifier;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n\n}\n\nclass RepeatWhenSubscriber extends OuterSubscriber {\n  constructor(destination, notifier, source) {\n    super(destination);\n    this.notifier = notifier;\n    this.source = source;\n    this.sourceIsBeingSubscribedTo = true;\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub) {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.notifications.next();\n    }\n  }\n\n  _unsubscribe() {\n    const {\n      notifications,\n      retriesSubscription\n    } = this;\n\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n\n    this.retries = null;\n  }\n\n  _unsubscribeAndRecycle() {\n    const {\n      _unsubscribe\n    } = this;\n    this._unsubscribe = null;\n\n    super._unsubscribeAndRecycle();\n\n    this._unsubscribe = _unsubscribe;\n    return this;\n  }\n\n  subscribeToRetries() {\n    this.notifications = new Subject();\n    let retries;\n\n    try {\n      const {\n        notifier\n      } = this;\n      retries = notifier(this.notifications);\n    } catch (e) {\n      return super.complete();\n    }\n\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n\n}","map":{"version":3,"names":["Subject","OuterSubscriber","subscribeToResult","repeatWhen","notifier","source","lift","RepeatWhenOperator","constructor","call","subscriber","subscribe","RepeatWhenSubscriber","destination","sourceIsBeingSubscribedTo","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyComplete","complete","isStopped","retries","subscribeToRetries","retriesSubscription","closed","_unsubscribeAndRecycle","notifications","next","_unsubscribe","unsubscribe","e"],"sources":["C:/DevSid/Projet/App-Angular/my-first-app/node_modules/rxjs/_esm2015/internal/operators/repeatWhen.js"],"sourcesContent":["import { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function repeatWhen(notifier) {\n    return (source) => source.lift(new RepeatWhenOperator(notifier));\n}\nclass RepeatWhenOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    }\n}\nclass RepeatWhenSubscriber extends OuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    }\n    notifyComplete(innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return super.complete();\n        }\n    }\n    complete() {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return super.complete();\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    }\n    _unsubscribe() {\n        const { notifications, retriesSubscription } = this;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    }\n    _unsubscribeAndRecycle() {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        super._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        return this;\n    }\n    subscribeToRetries() {\n        this.notifications = new Subject();\n        let retries;\n        try {\n            const { notifier } = this;\n            retries = notifier(this.notifications);\n        }\n        catch (e) {\n            return super.complete();\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult(this, retries);\n    }\n}\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAA8B;EACjC,OAAQC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,kBAAJ,CAAuBH,QAAvB,CAAZ,CAAnB;AACH;;AACD,MAAMG,kBAAN,CAAyB;EACrBC,WAAW,CAACJ,QAAD,EAAW;IAClB,KAAKA,QAAL,GAAgBA,QAAhB;EACH;;EACDK,IAAI,CAACC,UAAD,EAAaL,MAAb,EAAqB;IACrB,OAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,oBAAJ,CAAyBF,UAAzB,EAAqC,KAAKN,QAA1C,EAAoDC,MAApD,CAAjB,CAAP;EACH;;AANoB;;AAQzB,MAAMO,oBAAN,SAAmCX,eAAnC,CAAmD;EAC/CO,WAAW,CAACK,WAAD,EAAcT,QAAd,EAAwBC,MAAxB,EAAgC;IACvC,MAAMQ,WAAN;IACA,KAAKT,QAAL,GAAgBA,QAAhB;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKS,yBAAL,GAAiC,IAAjC;EACH;;EACDC,UAAU,CAACC,UAAD,EAAaC,UAAb,EAAyBC,UAAzB,EAAqCC,UAArC,EAAiDC,QAAjD,EAA2D;IACjE,KAAKN,yBAAL,GAAiC,IAAjC;IACA,KAAKT,MAAL,CAAYM,SAAZ,CAAsB,IAAtB;EACH;;EACDU,cAAc,CAACD,QAAD,EAAW;IACrB,IAAI,KAAKN,yBAAL,KAAmC,KAAvC,EAA8C;MAC1C,OAAO,MAAMQ,QAAN,EAAP;IACH;EACJ;;EACDA,QAAQ,GAAG;IACP,KAAKR,yBAAL,GAAiC,KAAjC;;IACA,IAAI,CAAC,KAAKS,SAAV,EAAqB;MACjB,IAAI,CAAC,KAAKC,OAAV,EAAmB;QACf,KAAKC,kBAAL;MACH;;MACD,IAAI,CAAC,KAAKC,mBAAN,IAA6B,KAAKA,mBAAL,CAAyBC,MAA1D,EAAkE;QAC9D,OAAO,MAAML,QAAN,EAAP;MACH;;MACD,KAAKM,sBAAL;;MACA,KAAKC,aAAL,CAAmBC,IAAnB;IACH;EACJ;;EACDC,YAAY,GAAG;IACX,MAAM;MAAEF,aAAF;MAAiBH;IAAjB,IAAyC,IAA/C;;IACA,IAAIG,aAAJ,EAAmB;MACfA,aAAa,CAACG,WAAd;MACA,KAAKH,aAAL,GAAqB,IAArB;IACH;;IACD,IAAIH,mBAAJ,EAAyB;MACrBA,mBAAmB,CAACM,WAApB;MACA,KAAKN,mBAAL,GAA2B,IAA3B;IACH;;IACD,KAAKF,OAAL,GAAe,IAAf;EACH;;EACDI,sBAAsB,GAAG;IACrB,MAAM;MAAEG;IAAF,IAAmB,IAAzB;IACA,KAAKA,YAAL,GAAoB,IAApB;;IACA,MAAMH,sBAAN;;IACA,KAAKG,YAAL,GAAoBA,YAApB;IACA,OAAO,IAAP;EACH;;EACDN,kBAAkB,GAAG;IACjB,KAAKI,aAAL,GAAqB,IAAI7B,OAAJ,EAArB;IACA,IAAIwB,OAAJ;;IACA,IAAI;MACA,MAAM;QAAEpB;MAAF,IAAe,IAArB;MACAoB,OAAO,GAAGpB,QAAQ,CAAC,KAAKyB,aAAN,CAAlB;IACH,CAHD,CAIA,OAAOI,CAAP,EAAU;MACN,OAAO,MAAMX,QAAN,EAAP;IACH;;IACD,KAAKE,OAAL,GAAeA,OAAf;IACA,KAAKE,mBAAL,GAA2BxB,iBAAiB,CAAC,IAAD,EAAOsB,OAAP,CAA5C;EACH;;AA5D8C"},"metadata":{},"sourceType":"module"}