{"ast":null,"code":"import { HttpErrorResponse, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./alertify.service\";\nexport let HttpErrorInterceptorService = /*#__PURE__*/(() => {\n  class HttpErrorInterceptorService {\n    constructor(alertify) {\n      this.alertify = alertify;\n    }\n\n    intercept(request, next) {\n      console.log('HTTP Request started');\n      return next.handle(request).pipe(catchError(error => {\n        const errorMessage = this.setError(error);\n        console.log(error);\n        this.alertify.error(errorMessage);\n        return throwError(errorMessage);\n      }));\n    }\n\n    setError(error) {\n      let errorMessage = 'Unknown error occured';\n\n      if (error.error instanceof ErrorEvent) {\n        // Client side error\n        errorMessage = error.error.message;\n      } else {\n        // server side error\n        if (error.status !== 0) {\n          errorMessage = error.error;\n        }\n\n        if (error.error.errorMessage && error.status !== 0) {\n          {\n            errorMessage = error.error.errorMessage;\n          }\n        }\n\n        if (!error.error.errorMessage && error.error && error.status !== 0) {\n          {\n            errorMessage = error.error;\n          }\n        }\n      }\n    }\n\n  }\n\n  HttpErrorInterceptorService.ɵfac = function HttpErrorInterceptorService_Factory(t) {\n    return new (t || HttpErrorInterceptorService)(i0.ɵɵinject(i1.AlertifyService));\n  };\n\n  HttpErrorInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpErrorInterceptorService,\n    factory: HttpErrorInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n  return HttpErrorInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module"}