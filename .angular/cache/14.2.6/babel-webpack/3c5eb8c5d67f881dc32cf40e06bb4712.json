{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let HousingService = /*#__PURE__*/(() => {\n  class HousingService {\n    constructor(http) {\n      this.http = http;\n    }\n    /* getAllCities(): Observable<string[]>{\r\n       return this.http.get<string[]>('http://localhost:5234/api/city');\r\n     } */\n\n\n    getProperty(id) {\n      return this.getAllProperties().pipe(map(propertiesArray => {\n        //  throw new Error('Some error')\n        return propertiesArray.find(p => p.Id === id);\n      }));\n    }\n\n    getAllProperties(SellRent) {\n      return this.http.get('data/propreties.json').pipe(map(data => {\n        const propertiesArray = [];\n        const localProperties = JSON.parse(localStorage.getItem('newProp'));\n\n        if (localProperties) {\n          for (const id in localProperties) {\n            if (SellRent) {\n              if (localProperties.hasOwnProperty(id) && localProperties[id].SellRent === SellRent) {\n                propertiesArray.push(localProperties[id]);\n              }\n            } else {\n              propertiesArray.push(localProperties[id]);\n            }\n          }\n        }\n\n        for (const id in data) {\n          if (SellRent) {\n            if (data.hasOwnProperty(id) && data[id].SellRent === SellRent) {\n              propertiesArray.push(data[id]);\n            }\n          } else {\n            propertiesArray.push(data[id]);\n          }\n        }\n\n        return propertiesArray;\n      }));\n      return this.http.get('data/properties.json');\n    }\n\n    addProperty(property) {\n      let newProp = [property]; // Add new property in array if newProp aleady exists in local storag\n\n      if (localStorage.getItem('newProp')) {\n        newProp = [property, ...JSON.parse(localStorage.getItem('newProp'))];\n      }\n\n      localStorage.setItem('newProp', JSON.stringify(newProp));\n    }\n\n    newPropID() {\n      if (localStorage.getItem('PID')) {\n        localStorage.setItem('PID', String(+localStorage.getItem('PID') + 1));\n        return +localStorage.getItem('PID');\n      } else {\n        localStorage.setItem('PID', '101');\n        return 101;\n      }\n    }\n\n  }\n\n  HousingService.ɵfac = function HousingService_Factory(t) {\n    return new (t || HousingService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  HousingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HousingService,\n    factory: HousingService.ɵfac,\n    providedIn: 'root'\n  });\n  return HousingService;\n})();","map":{"version":3,"mappings":"AAEA,SAASA,GAAT,QAAoB,gBAApB;;;AAUA,WAAaC,cAAb;EAAM,MAAOA,cAAP,CAAqB;IAEzBC,YAAoBC,IAApB,EAAoC;MAAhB;IAAqB;IAE1C;;;;;IAIDC,WAAW,CAACC,EAAD,EAAU;MACnB,OAAO,KAAKC,gBAAL,GAAwBC,IAAxB,CACLP,GAAG,CAACQ,eAAe,IAAG;QACtB;QACE,OAAOA,eAAe,CAACC,IAAhB,CAAqBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASN,EAAnC,CAAP;MACD,CAHE,CADE,CAAP;IAMD;;IACCC,gBAAgB,CAACM,QAAD,EAAkB;MAChC,OAAO,KAAKT,IAAL,CAAUU,GAAV,CAAc,sBAAd,EAAsCN,IAAtC,CACLP,GAAG,CAACc,IAAI,IAAG;QACX,MAAMN,eAAe,GAAoB,EAAzC;QACA,MAAMO,eAAe,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAxB;;QACA,IAAGJ,eAAH,EAAmB;UACjB,KAAK,MAAMV,EAAX,IAAiBU,eAAjB,EAAkC;YAChC,IAAGH,QAAH,EAAY;cACV,IAAIG,eAAe,CAACK,cAAhB,CAA+Bf,EAA/B,KAAsCU,eAAe,CAACV,EAAD,CAAf,CAAoBO,QAApB,KAAiCA,QAA3E,EAAqF;gBACnFJ,eAAe,CAACa,IAAhB,CAAqBN,eAAe,CAACV,EAAD,CAApC;cACD;YACF,CAJD,MAIO;cACHG,eAAe,CAACa,IAAhB,CAAqBN,eAAe,CAACV,EAAD,CAApC;YAED;UACF;QAEF;;QAGH,KAAK,MAAMA,EAAX,IAAiBS,IAAjB,EAAuB;UACrB,IAAGF,QAAH,EAAY;YACV,IAAIE,IAAI,CAACM,cAAL,CAAoBf,EAApB,KAA2BS,IAAI,CAACT,EAAD,CAAJ,CAASO,QAAT,KAAsBA,QAArD,EAA+D;cAC7DJ,eAAe,CAACa,IAAhB,CAAqBP,IAAI,CAACT,EAAD,CAAzB;YACD;UACF,CAJD,MAIM;YACFG,eAAe,CAACa,IAAhB,CAAqBP,IAAI,CAACT,EAAD,CAAzB;UAED;QACF;;QAGH,OAAOG,eAAP;MACC,CA/BE,CADE,CAAP;MAmCA,OAAO,KAAKL,IAAL,CAAUU,GAAV,CAA0B,sBAA1B,CAAP;IACD;;IACDS,WAAW,CAACC,QAAD,EAAmB;MAC5B,IAAIC,OAAO,GAAG,CAACD,QAAD,CAAd,CAD4B,CAG5B;;MACA,IAAIL,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAJ,EAAoC;QAClCK,OAAO,GAAG,CAACD,QAAD,EAAW,GAAGP,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAd,CAAV;MACD;;MACDD,YAAY,CAACO,OAAb,CAAqB,SAArB,EAAgCT,IAAI,CAACU,SAAL,CAAeF,OAAf,CAAhC;IACD;;IAEDG,SAAS;MACP,IAAIT,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAJ,EAAiC;QAC/BD,YAAY,CAACO,OAAb,CAAqB,KAArB,EAA4BG,MAAM,CAAC,CAACV,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAD,GAA+B,CAAhC,CAAlC;QACA,OAAO,CAACD,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAR;MACD,CAHD,MAGO;QACLD,YAAY,CAACO,OAAb,CAAqB,KAArB,EAA4B,KAA5B;QACA,OAAO,GAAP;MAED;IACF;;EAzEwB;;;qBAAdxB,gBAAc4B;EAAA;;;WAAd5B;IAAc6B,SAAd7B,cAAc;IAAA8B,YAFb;;EAEd,OAAa9B,cAAb;AAAA","names":["map","HousingService","constructor","http","getProperty","id","getAllProperties","pipe","propertiesArray","find","p","Id","SellRent","get","data","localProperties","JSON","parse","localStorage","getItem","hasOwnProperty","push","addProperty","property","newProp","setItem","stringify","newPropID","String","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\DevSid\\Projet\\App-Angular\\my-first-app\\src\\app\\services\\housing.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { connectableObservableDescriptor } from 'rxjs/internal/observable/ConnectableObservable';\r\nimport { Observable } from 'rxjs';\r\nimport { IProperty } from '../model/iproperty';\r\nimport { IPropertyBase } from '../model/ipropertybase';\r\nimport { Property } from '../model/property';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HousingService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n /* getAllCities(): Observable<string[]>{\r\n    return this.http.get<string[]>('http://localhost:5234/api/city');\r\n  } */\r\n\r\ngetProperty(id:number){\r\n  return this.getAllProperties().pipe(\r\n    map(propertiesArray => {\r\n    //  throw new Error('Some error')\r\n      return propertiesArray.find(p => p.Id === id)\r\n    })\r\n  );\r\n}\r\n  getAllProperties(SellRent?: number): Observable<Property[]> {\r\n    return this.http.get('data/propreties.json').pipe(\r\n      map(data => {\r\n      const propertiesArray: Array<Property> = [];\r\n      const localProperties = JSON.parse(localStorage.getItem('newProp'));\r\n      if(localProperties){\r\n        for (const id in localProperties) {\r\n          if(SellRent){\r\n            if (localProperties.hasOwnProperty(id) && localProperties[id].SellRent === SellRent) {\r\n              propertiesArray.push(localProperties[id]);\r\n            }\r\n          } else {\r\n              propertiesArray.push(localProperties[id]);\r\n\r\n            }\r\n          }\r\n\r\n        }\r\n\r\n\r\n      for (const id in data) {\r\n        if(SellRent){\r\n          if (data.hasOwnProperty(id) && data[id].SellRent === SellRent) {\r\n            propertiesArray.push(data[id]);\r\n          }\r\n        }else {\r\n            propertiesArray.push(data[id]);\r\n\r\n          }\r\n        }\r\n\r\n\r\n      return propertiesArray;\r\n      })\r\n    );\r\n\r\n    return this.http.get<Property[]>('data/properties.json');\r\n  }\r\n  addProperty(property: Property) {\r\n    let newProp = [property];\r\n\r\n    // Add new property in array if newProp aleady exists in local storag\r\n    if (localStorage.getItem('newProp')){\r\n      newProp = [property, ...JSON.parse(localStorage.getItem('newProp'))]\r\n    }\r\n    localStorage.setItem('newProp', JSON.stringify(newProp));\r\n  }\r\n\r\n  newPropID(){\r\n    if (localStorage.getItem('PID')) {\r\n      localStorage.setItem('PID', String(+localStorage.getItem('PID') + 1));\r\n      return +localStorage.getItem('PID');\r\n    } else {\r\n      localStorage.setItem('PID', '101');\r\n      return 101;\r\n\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}