{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let SortPipe = /*#__PURE__*/(() => {\n  class SortPipe {\n    transform(value, args) {\n      const sortField = args[0];\n      const sortDirection = args[1];\n      let multipier = 1;\n\n      if (sortDirection === 'desc') {\n        multipier = -1;\n      }\n\n      if (value) {\n        value === null || value === void 0 ? void 0 : value.sort((a, b) => {\n          if (a[sortField] < b[sortField]) {\n            return -1 * multipier;\n          } else if (a[sortField] > b[sortField]) {\n            return 1 * multipier;\n          } else {\n            return 0;\n          }\n        });\n        return value;\n      }\n    }\n\n  }\n\n  SortPipe.ɵfac = function SortPipe_Factory(t) {\n    return new (t || SortPipe)();\n  };\n\n  SortPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"sort\",\n    type: SortPipe,\n    pure: true\n  });\n  return SortPipe;\n})();\n;","map":{"version":3,"mappings":";AAKA,WAAaA,QAAb;EAAM,MAAOA,QAAP,CAAe;IAEnBC,SAAS,CAACC,KAAD,EAAuBC,IAAvB,EAAkC;MACxC,MAAMC,SAAS,GAAGD,IAAI,CAAC,CAAD,CAAtB;MACA,MAAME,aAAa,GAAEF,IAAI,CAAC,CAAD,CAAzB;MACA,IAAIG,SAAS,GAAG,CAAhB;;MAEA,IAAID,aAAa,KAAK,MAAtB,EAA6B;QAC3BC,SAAS,GAAG,CAAC,CAAb;MACD;;MAED,IAAIJ,KAAJ,EAAU;QACTA,KAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEK,IAAP,CAAY,CAACC,CAAD,EAAQC,CAAR,KAAiB;UAC3B,IAAID,CAAC,CAACJ,SAAD,CAAD,GAAeK,CAAC,CAACL,SAAD,CAApB,EAAgC;YAC9B,OAAO,CAAC,CAAD,GAAKE,SAAZ;UACD,CAFD,MAEO,IAAIE,CAAC,CAACJ,SAAD,CAAD,GAAeK,CAAC,CAACL,SAAD,CAApB,EAAiC;YACtC,OAAO,IAAIE,SAAX;UACD,CAFM,MAEA;YACL,OAAO,CAAP;UACD;QACD,CARF;QASC,OAAOJ,KAAP;MACD;IAEH;;EAxBkB;;;qBAARF;EAAQ;;;;UAARA;IAAQU;;EAArB,OAAaV,QAAb;AAAA;AA0BC","names":["SortPipe","transform","value","args","sortField","sortDirection","multipier","sort","a","b","pure"],"sourceRoot":"","sources":["C:\\DevSid\\Projet\\App-Angular\\my-first-app\\src\\app\\Pipes\\sort.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'sort'\n})\nexport class SortPipe implements PipeTransform {\n\n  transform(value: Array<string>, args: any[]): any {\n     const sortField = args[0];\n     const sortDirection =args[1];\n     let multipier = 1;\n\n     if (sortDirection === 'desc'){\n       multipier = -1;\n     }\n\n     if (value){\n      value?.sort((a:any, b:any) => {\n        if (a[sortField] < b[sortField]){\n          return -1 * multipier;\n        } else if (a[sortField] > b[sortField]) {\n          return 1 * multipier;\n        } else {\n          return 0;\n        }\n       });\n       return value;\n     }\n\n  }\n\n};\n"]},"metadata":{},"sourceType":"module"}