{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/user-service.service\";\nimport * as i3 from \"src/app/services/alertify.service\";\nimport * as i4 from \"@angular/common\";\n\nfunction UserRegisterComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 20);\n    i0.ɵɵtext(1, \" Please provide name \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction UserRegisterComponent_span_16_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" Please provide email id \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction UserRegisterComponent_span_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 20);\n    i0.ɵɵtemplate(1, UserRegisterComponent_span_16_span_1_Template, 2, 0, \"span\", 21);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.email.hasError(\"required\"));\n  }\n}\n\nfunction UserRegisterComponent_span_21_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" Please provide password \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction UserRegisterComponent_span_21_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" Password should not be lesser than 8 character \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction UserRegisterComponent_span_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 20);\n    i0.ɵɵtemplate(1, UserRegisterComponent_span_21_span_1_Template, 2, 0, \"span\", 21);\n    i0.ɵɵtemplate(2, UserRegisterComponent_span_21_span_2_Template, 2, 0, \"span\", 21);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.password.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.password.errors.minlength);\n  }\n}\n\nfunction UserRegisterComponent_span_26_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" Please confirm password \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction UserRegisterComponent_span_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 20);\n    i0.ɵɵtemplate(1, UserRegisterComponent_span_26_span_1_Template, 2, 0, \"span\", 21);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.confirmPassword.hasError(\"required\"));\n  }\n}\n\nfunction UserRegisterComponent_span_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 20);\n    i0.ɵɵtext(1, \" Password not matched \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction UserRegisterComponent_span_32_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" Please provide mobile \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction UserRegisterComponent_span_32_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 20);\n    i0.ɵɵtext(1, \" Invalid mobile number \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction UserRegisterComponent_span_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 20);\n    i0.ɵɵtemplate(1, UserRegisterComponent_span_32_span_1_Template, 2, 0, \"span\", 21);\n    i0.ɵɵtemplate(2, UserRegisterComponent_span_32_span_2_Template, 2, 0, \"span\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.mobile.hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.mobile.hasError(\"maxlength\"));\n  }\n}\n\nexport let UserRegisterComponent = /*#__PURE__*/(() => {\n  class UserRegisterComponent {\n    constructor(fb, userService, alertify) {\n      this.fb = fb;\n      this.userService = userService;\n      this.alertify = alertify;\n    }\n\n    ngOnInit() {\n      /* this.registerationForm = new FormGroup({\r\n        userName: new FormControl(null, Validators.required),\r\n        email: new FormControl(null, [Validators.required, Validators.email]),\r\n        password: new FormControl(null, [Validators.required, Validators.minLength(8)]),\r\n        confirmPassword: new FormControl(null, [Validators.required]),\r\n        mobile: new FormControl(null, [Validators.required, Validators.maxLength(10)])\r\n       }, this.passwordMatchingValidatior); */\n      //this.registerationForm.controls['userName'].setValue('Default Value')\n      this.createRegisterationForm();\n    }\n\n    createRegisterationForm() {\n      this.registerationForm = this.fb.group({\n        userName: [null, Validators.required],\n        email: [null, [Validators.required, Validators.email]],\n        password: [null, [Validators.required, Validators.minLength(8)]],\n        confirmPassword: [null, Validators.required],\n        mobile: [null, [Validators.required, Validators.maxLength(10)]]\n      }, {\n        validators: this.passwordMatchingValidatior\n      });\n    }\n    /* onSubmit(){\r\n       console.log(this.registerationForm);\r\n     }  */\n\n\n    passwordMatchingValidatior(fg) {\n      return fg.get('password').value === fg.get('confirmPassword').value ? null : {\n        notmatched: true\n      };\n    } // Getter methods for all form controls\n    // ------------------------------------\n\n\n    get userName() {\n      return this.registerationForm.get('userName');\n    }\n\n    get email() {\n      return this.registerationForm.get('email');\n    }\n\n    get password() {\n      return this.registerationForm.get('password');\n    }\n\n    get confirmPassword() {\n      return this.registerationForm.get('confirmPassword');\n    }\n\n    get mobile() {\n      return this.registerationForm.get('mobile');\n    } // ------------------------\n\n\n    onSubmit() {\n      console.log(this.registerationForm.value);\n      this.userSubmitted = true; // if we d'ont put anythig in the forms, our list still the same\n\n      if (this.registerationForm.valid) {\n        //this.user = Object.assign(this.user, this.registerationForm.value);\n        this.userService.addUser(this.userData()); // remove value putting in forms after submit it\n\n        this.registerationForm.reset();\n        this.userSubmitted = false;\n        this.alertify.success('Congrats, you are successfully registered');\n      } else {\n        this.alertify.error('Kindly provide the required fields');\n      }\n    }\n\n    userData() {\n      return this.user = {\n        userName: this.userName.value,\n        email: this.email.value,\n        password: this.password.value,\n        mobile: this.mobile.value\n      };\n    }\n\n  }\n\n  UserRegisterComponent.ɵfac = function UserRegisterComponent_Factory(t) {\n    return new (t || UserRegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.UserServiceService), i0.ɵɵdirectiveInject(i3.AlertifyService));\n  };\n\n  UserRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UserRegisterComponent,\n    selectors: [[\"app-user-register\"]],\n    decls: 38,\n    vars: 7,\n    consts: [[1, \"row\"], [1, \"col-6\", \"m-auto\"], [1, \"card\", \"m-auto\"], [1, \"card-header\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"col-12\"], [\"for\", \"name\", 1, \"form-label\"], [\"type\", \"text\", \"formControlName\", \"userName\", 1, \"form-control\"], [\"class\", \"error-block\", 4, \"ngIf\"], [\"for\", \"email\", 1, \"form-label\"], [\"type\", \"text\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"passwrod\", 1, \"form-label\"], [\"type\", \"text\", \"formControlName\", \"password\", 1, \"form-control\"], [\"for\", \"cpassword\", 1, \"form-label\"], [\"type\", \"password\", \"formControlName\", \"confirmPassword\", 1, \"form-control\"], [\"for\", \"mobile\", 1, \"form-label\"], [\"type\", \"text\", \"formControlName\", \"mobile\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"type\", \"reset\", 1, \"btn\", \"btn-secondary\", \"ml-2\"], [1, \"error-block\"], [4, \"ngIf\"]],\n    template: function UserRegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n        i0.ɵɵtext(4, \" Register \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"form\", 5);\n        i0.ɵɵlistener(\"ngSubmit\", function UserRegisterComponent_Template_form_ngSubmit_6_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(7, \"div\", 6)(8, \"label\", 7);\n        i0.ɵɵtext(9, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 8);\n        i0.ɵɵtemplate(11, UserRegisterComponent_span_11_Template, 2, 0, \"span\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 6)(13, \"label\", 10);\n        i0.ɵɵtext(14, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 11);\n        i0.ɵɵtemplate(16, UserRegisterComponent_span_16_Template, 2, 1, \"span\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 6)(18, \"label\", 12);\n        i0.ɵɵtext(19, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(20, \"input\", 13);\n        i0.ɵɵtemplate(21, UserRegisterComponent_span_21_Template, 3, 2, \"span\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"div\", 6)(23, \"label\", 14);\n        i0.ɵɵtext(24, \"Confirm Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(25, \"input\", 15);\n        i0.ɵɵtemplate(26, UserRegisterComponent_span_26_Template, 2, 1, \"span\", 9);\n        i0.ɵɵtemplate(27, UserRegisterComponent_span_27_Template, 2, 0, \"span\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", 6)(29, \"label\", 16);\n        i0.ɵɵtext(30, \"Mobile\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(31, \"input\", 17);\n        i0.ɵɵtemplate(32, UserRegisterComponent_span_32_Template, 3, 2, \"span\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"div\", 6)(34, \"button\", 18);\n        i0.ɵɵtext(35, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"button\", 19);\n        i0.ɵɵtext(37, \"Cancel\");\n        i0.ɵɵelementEnd()()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formGroup\", ctx.registerationForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", !ctx.userName.valid && (ctx.userName.touched || ctx.userSubmitted));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", !ctx.email.valid && (ctx.email.touched || ctx.userSubmitted));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", !ctx.password.valid && (ctx.password.touched || ctx.userSubmitted));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", !ctx.confirmPassword.valid && (ctx.confirmPassword.touched || ctx.userSubmitted));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.registerationForm.hasError(\"notmatched\") && ctx.confirmPassword.valid);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", !ctx.mobile.valid && (ctx.mobile.touched || ctx.userSubmitted));\n      }\n    },\n    dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ1c2VyLXJlZ2lzdGVyLmNvbXBvbmVudC5zY3NzIn0= */\"]\n  });\n  return UserRegisterComponent;\n})();","map":{"version":3,"mappings":"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","names":["Validators","i0","UserRegisterComponent","constructor","fb","userService","alertify","ngOnInit","createRegisterationForm","registerationForm","group","userName","required","email","password","minLength","confirmPassword","mobile","maxLength","validators","passwordMatchingValidatior","fg","get","value","notmatched","onSubmit","console","log","userSubmitted","valid","addUser","userData","reset","success","error","user","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\DevSid\\Projet\\App-Angular\\my-first-app\\src\\app\\user\\user-register\\user-register.component.ts","C:\\DevSid\\Projet\\App-Angular\\my-first-app\\src\\app\\user\\user-register\\user-register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { User } from 'src/app/model/user';\nimport { UserServiceService } from 'src/app/services/user-service.service';\nimport * as alertyfy from 'alertifyjs';\nimport { AlertifyService } from 'src/app/services/alertify.service';\n\n\n@Component({\n  selector: 'app-user-register',\n  templateUrl: './user-register.component.html',\n  styleUrls: ['./user-register.component.scss']\n})\nexport class UserRegisterComponent implements OnInit {\n\n  registerationForm: FormGroup;\n  user : User;\n  userSubmitted: boolean;\n\n  constructor(private fb: FormBuilder, private userService: UserServiceService,\n              private alertify: AlertifyService) { }\n\n  ngOnInit() {\n\n     /* this.registerationForm = new FormGroup({\n       userName: new FormControl(null, Validators.required),\n       email: new FormControl(null, [Validators.required, Validators.email]),\n       password: new FormControl(null, [Validators.required, Validators.minLength(8)]),\n       confirmPassword: new FormControl(null, [Validators.required]),\n       mobile: new FormControl(null, [Validators.required, Validators.maxLength(10)])\n      }, this.passwordMatchingValidatior); */\n\n       //this.registerationForm.controls['userName'].setValue('Default Value')\n\n       this.createRegisterationForm();\n    }\n\n    createRegisterationForm() {\n      this.registerationForm =  this.fb.group({\n          userName: [null, Validators.required],\n          email: [null, [Validators.required, Validators.email]],\n          password: [null, [Validators.required, Validators.minLength(8)]],\n          confirmPassword: [null, Validators.required],\n          mobile: [null, [Validators.required, Validators.maxLength(10)]]\n      }, {validators: this.passwordMatchingValidatior});\n  }\n\n\n /* onSubmit(){\n    console.log(this.registerationForm);\n  }  */\n\n  passwordMatchingValidatior(fg: FormGroup): Validators {\n    return fg.get('password').value === fg.get('confirmPassword').value ? null :\n        {notmatched: true};\n}\n  // Getter methods for all form controls\n    // ------------------------------------\n    get userName() {\n      return this.registerationForm.get('userName') as FormControl;\n  }\n\n  get email() {\n      return this.registerationForm.get('email') as FormControl;\n  }\n  get password() {\n      return this.registerationForm.get('password') as FormControl;\n  }\n  get confirmPassword() {\n      return this.registerationForm.get('confirmPassword') as FormControl;\n  }\n  get mobile() {\n      return this.registerationForm.get('mobile') as FormControl;\n  }\n  // ------------------------\n\n  onSubmit(){\n    console.log(this.registerationForm.value);\n    this.userSubmitted = true;\n    // if we d'ont put anythig in the forms, our list still the same\nif (this.registerationForm.valid){\n\n  //this.user = Object.assign(this.user, this.registerationForm.value);\n  this.userService.addUser(this.userData());\n    // remove value putting in forms after submit it\n  this.registerationForm.reset();\n  this.userSubmitted = false;\n  this.alertify.success('Congrats, you are successfully registered');\n\n} else {\n  this.alertify.error('Kindly provide the required fields');\n}\n\n\n  }\n\n\n  userData(): User {\n    return this.user = {\n        userName: this.userName.value,\n        email: this.email.value,\n        password: this.password.value,\n        mobile: this.mobile.value\n    };\n}\n\n}\n","<div class=\"row\">\n  <div class=\"col-6 m-auto\">\n  <div class=\"card m-auto\">\n    <div class=\"card-header\">\n      Register\n    </div>\n    <div class=\"card-body\">\n      <form [formGroup]=\"registerationForm\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"form-group col-12\">\n            <label for=\"name\" class=\"form-label\">Name</label>\n            <input type=\"text\" class=\"form-control\"\n            formControlName=\"userName\"\n             >\n             <span *ngIf=\"!userName.valid\n             && (userName.touched || userSubmitted)\" class=\"error-block\">\n            Please provide name\n          </span>\n        </div>\n\n        <div class=\"form-group col-12\">\n          <label for=\"email\" class=\"form-label\">Email</label>\n          <input type=\"text\" class=\"form-control\" formControlName=\"email\">\n\n          <span *ngIf=\"!email.valid\n          && (email.touched || userSubmitted)\" class=\"error-block\">\n          <span *ngIf=\"email.hasError('required')\">\n                Please provide email id\n          </span>\n       </span>\n        </div>\n\n        <div class=\"form-group col-12\">\n          <label for=\"passwrod\" class=\"form-label\">Password</label>\n          <input type=\"text\" class=\"form-control\" formControlName=\"password\">\n          <span *ngIf=\"!password.valid\n          && (password.touched || userSubmitted)\" class=\"error-block\">\n          <span *ngIf=\"password.errors['required']\">\n                Please provide password\n          </span>\n          <span *ngIf=\"password.errors.minlength\">\n            Password should not be lesser than 8 character\n          </span>\n       </span>\n        </div>\n\n        <div class=\"form-group col-12\">\n          <label for=\"cpassword\" class=\"form-label\">Confirm Password</label>\n          <input type=\"password\" class=\"form-control\" formControlName=\"confirmPassword\">\n          <span  *ngIf=\"!confirmPassword.valid && (confirmPassword.touched || userSubmitted)\" class=\"error-block\">\n            <span *ngIf=\"confirmPassword.hasError('required')\">\n              Please confirm password\n            </span>\n          </span>\n            <span *ngIf=\"registerationForm.hasError('notmatched') && confirmPassword.valid\" class=\"error-block\">\n              Password not matched\n            </span>\n        </div>\n\n        <div class=\"form-group col-12\">\n          <label for=\"mobile\" class=\"form-label\">Mobile</label>\n          <input type=\"text\" class=\"form-control\" formControlName=\"mobile\">\n          <span  *ngIf=\"!mobile.valid && (mobile.touched || userSubmitted)\" class=\"error-block\">\n            <span *ngIf=\"mobile.hasError('required')\">\n              Please provide mobile\n            </span>\n            <span *ngIf=\"mobile.hasError('maxlength')\" class=\"error-block\">\n              Invalid mobile number\n            </span>\n        </span>\n        </div>\n\n        <div class=\"form-group col-12\">\n          <button type=\"submit\" class=\"btn btn-primary\">Save</button>\n          <button type=\"reset\" class=\"btn btn-secondary ml-2\">Cancel</button>\n        </div>\n\n       <!-- Form Values: {{registerationForm.value | json}} <br/>\n        Form Values: {{registerationForm.valid}} -->\n\n      </form>\n    </div>\n  </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module"}